// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebComputerFirm.Data;

namespace WebComputerFirm.Migrations
{
    [DbContext(typeof(ComputerFirm_DataBaseContext))]
    [Migration("20210529083854_FirstMigration1")]
    partial class FirstMigration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebComputerFirm.Models.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .HasColumnName("Component_ID")
                        .HasColumnType("INT");

                    b.Property<string>("ComponentCharacteristics")
                        .IsRequired()
                        .HasColumnName("Component_Characteristics")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ComponentCost")
                        .IsRequired()
                        .HasColumnName("Component_Cost")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ComponentCountryManufacturer")
                        .IsRequired()
                        .HasColumnName("Component_Country_Manufacturer")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<DateTime>("ComponentDate")
                        .HasColumnName("Component_Date")
                        .HasColumnType("DATE");

                    b.Property<string>("ComponentDiscription")
                        .IsRequired()
                        .HasColumnName("Component_Discription")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ComponentManufacturer")
                        .IsRequired()
                        .HasColumnName("Component_Manufacturer")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ComponentMark")
                        .IsRequired()
                        .HasColumnName("Component_Mark")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("ComponentTermWarranty")
                        .HasColumnName("Component_Term_warranty")
                        .HasColumnType("INT");

                    b.Property<int>("TypeId")
                        .HasColumnName("Type_ID")
                        .HasColumnType("INT");

                    b.HasKey("ComponentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_ID")
                        .HasColumnType("INT");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnName("Customer_Address")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnName("Customer_Full_name")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnName("Customer_Phone_number")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("Employee_ID")
                        .HasColumnType("INT");

                    b.Property<string>("EmployeeAddress")
                        .IsRequired()
                        .HasColumnName("Employee_Address")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("EmployeeAge")
                        .IsRequired()
                        .HasColumnName("Employee_Age")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("EmployeeFullName")
                        .IsRequired()
                        .HasColumnName("Employee_Full_name")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("EmployeeGender")
                        .IsRequired()
                        .HasColumnName("Employee_Gender")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("EmployeePassport")
                        .IsRequired()
                        .HasColumnName("Employee_Passport")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("EmployeePhoneNumber")
                        .IsRequired()
                        .HasColumnName("Employee_Phone_number")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("PositionId")
                        .HasColumnName("Position_ID")
                        .HasColumnType("INT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("Order_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ComponentId1")
                        .HasColumnName("Component_ID_1")
                        .HasColumnType("INT");

                    b.Property<int>("ComponentId2")
                        .HasColumnName("Component_ID_2")
                        .HasColumnType("INT");

                    b.Property<int>("ComponentId3")
                        .HasColumnName("Component_ID_3")
                        .HasColumnType("INT");

                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_ID")
                        .HasColumnType("INT");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("Employee_ID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("OrderExecutionDate")
                        .HasColumnName("Order_Execution_Date")
                        .HasColumnType("DATE");

                    b.Property<string>("OrderExecutionMark")
                        .IsRequired()
                        .HasColumnName("Order_Execution_mark")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("OrderGeneralWarrantyDuration")
                        .HasColumnName("Order_General_Warranty_Duration")
                        .HasColumnType("INT");

                    b.Property<string>("OrderMarkOfPayment")
                        .IsRequired()
                        .HasColumnName("Order_Mark_of_payment")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<DateTime>("OrderOrderDate")
                        .HasColumnName("Order_Order_date")
                        .HasColumnType("DATE");

                    b.Property<string>("OrderPrepaidShare")
                        .IsRequired()
                        .HasColumnName("Order_Prepaid_Share")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("ServiceId1")
                        .HasColumnName("Service_ID_1")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceId2")
                        .HasColumnName("Service_ID_2")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceId3")
                        .HasColumnName("Service_ID_3")
                        .HasColumnType("INT");

                    b.Property<int>("TotalCost")
                        .HasColumnName("Total_cost")
                        .HasColumnType("INT");

                    b.HasKey("OrderId");

                    b.HasIndex("ComponentId1");

                    b.HasIndex("ComponentId2");

                    b.HasIndex("ComponentId3");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId1");

                    b.HasIndex("ServiceId2");

                    b.HasIndex("ServiceId3");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnName("Position_ID")
                        .HasColumnType("INT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnName("Job_title")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Salary")
                        .HasColumnType("INT");

                    b.HasKey("PositionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Services", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnName("Service_ID")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceCost")
                        .HasColumnName("Service_cost")
                        .HasColumnType("INT");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnName("Service_description")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasColumnName("Service_title")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("WebComputerFirm.Models.TypesComponent", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnName("Type_ID")
                        .HasColumnType("INT");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnName("Type_description")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasColumnName("Type_title")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("TypeId");

                    b.ToTable("Types_Component");
                });

            modelBuilder.Entity("WebComputerFirm.Models.Component", b =>
                {
                    b.HasOne("WebComputerFirm.Models.TypesComponent", "Type")
                        .WithMany("Component")
                        .HasForeignKey("TypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("WebComputerFirm.Models.Employee", b =>
                {
                    b.HasOne("WebComputerFirm.Models.Position", "Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId")
                        .IsRequired();
                });

            modelBuilder.Entity("WebComputerFirm.Models.Orders", b =>
                {
                    b.HasOne("WebComputerFirm.Models.Services", "ComponentId1Navigation")
                        .WithMany("OrdersComponentId1Navigation")
                        .HasForeignKey("ComponentId1")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Services", "ComponentId2Navigation")
                        .WithMany("OrdersComponentId2Navigation")
                        .HasForeignKey("ComponentId2")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Services", "ComponentId3Navigation")
                        .WithMany("OrdersComponentId3Navigation")
                        .HasForeignKey("ComponentId3")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Component", "ServiceId1Navigation")
                        .WithMany("OrdersServiceId1Navigation")
                        .HasForeignKey("ServiceId1")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Component", "ServiceId2Navigation")
                        .WithMany("OrdersServiceId2Navigation")
                        .HasForeignKey("ServiceId2")
                        .IsRequired();

                    b.HasOne("WebComputerFirm.Models.Component", "ServiceId3Navigation")
                        .WithMany("OrdersServiceId3Navigation")
                        .HasForeignKey("ServiceId3")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
